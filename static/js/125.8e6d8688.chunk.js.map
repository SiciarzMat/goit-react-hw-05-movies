{"version":3,"file":"static/js/125.8e6d8688.chunk.js","mappings":"gNAIMA,EAAkBC,EAAAA,GAAAA,EAAH,sHAORC,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OAAO,SAACH,EAAD,UAAkBG,GAC5B,C,0ICTYC,EAAS,mCAAG,WAAMC,GAAN,yFACAC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,4BAHb,qCAEa,cACjBE,EADiB,OAKjBC,EAAUD,EAASE,KAAKC,KALP,kBAOhBF,GAPgB,2CAAH,sD,6CCGhBG,EAAaV,EAAAA,GAAAA,GAAH,8DAKVW,EAAaX,EAAAA,GAAAA,GAAH,6GA6DhB,EAtDa,WACT,OAAkCY,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOH,EAAP,KAAaQ,EAAb,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAiBR,OAfAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAmB,mCAAG,2FACxBP,GAAa,GADW,kBAGMX,EAAUe,GAHhB,OAGdI,EAHc,OAIpBL,EAAQK,GAJY,gDAMpBN,EAAS,KAAMO,SANK,yBAQpBT,GAAa,GARO,4EAAH,qDAWzBO,GACH,GAAE,CAACH,KAGA,iCAEI,SAACR,EAAD,UACKD,EAAKe,OAAS,EAEXf,EAAKgB,KAAI,SAAAC,GAAK,OACV,UAACf,EAAD,WAC4B,OAAvBe,EAAMC,cACA,gBACCC,IAAI,yLACJC,IAAI,WACJC,MAAM,MAAMC,OAAO,SAGtB,gBACGH,IAAG,oCAA+BF,EAAMC,cACxCE,IAAG,UAAKH,EAAMM,MACdF,MAAM,MAAMC,OAAO,SAE3B,uBAAIL,EAAMM,QACV,0BAAG,sCAAH,IAAsBN,EAAMO,eAdfP,EAAMR,GADb,IAmBd,kDAEPL,IAAa,SAACqB,EAAA,EAAD,IACbnB,IAAS,SAACd,EAAA,EAAD,CAAOC,KAAK,0CAGjC,C","sources":["components/Error.js","services/fetchCast.js","pages/Cast.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst StyledParagraph = styled.p`\n    display: flex;\n    justify-content: center;\n    font-size: 20px;\n    font-size: bold;\n`\n\nexport const Error = ({ text }) => {\n    return <StyledParagraph>{text}</StyledParagraph>\n};\n\nError.propTypes = {\n    text: PropTypes.string.isRequired,\n}","import axios from 'axios';\n\nconst key = '9ac98fc7f7b54439f7d280280d36743b';\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${key}`\n  );\n\n  const details = response.data.cast;\n\n  return details;\n};\n","import { useEffect, useState } from \"react\";\nimport { fetchCast } from \"services/fetchCast\";\nimport { useParams } from \"react-router-dom\";\nimport { Loader } from \"../components/Loader\";\nimport { Error } from \"../components/Error\";\nimport styled from \"styled-components\";\n\nconst StyledList = styled.ul`\nlist-style: none;\nmargin-top: 15px;\n`\n\nconst StyledItem = styled.li`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\nmargin-bottom: 20px;\n`\n\nconst Cast = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [cast, setCast] = useState([]);\n    const { id } = useParams();\n\n    useEffect(() => {\n        const handleMoviesRequest = async () => {\n            setIsLoading(true)\n            try {\n                const fetchedCast = await fetchCast(id);\n                setCast(fetchedCast);\n            } catch (error) {\n                setError(error.message)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        handleMoviesRequest()\n    }, [id])\n\n    return (\n        <>\n\n            <StyledList>\n                {cast.length > 0\n                    ?\n                    cast.map(actor => (\n                        <StyledItem key={actor.id}>\n                            {actor.profile_path === null\n                                ? (<img\n                                    src=\"https://img.freepik.com/free-vector/illustration-camera-icon_53876-5563.jpg?w=900&t=st=1678486874~exp=1678487474~hmac=a4f04450d41b0500a3b50c9217530014aca806126c8517f7433768454ed1572d\"\n                                    alt=\"No found\"\n                                    width=\"25%\" height=\"25%\"\n                                />)\n                                :\n                                (<img\n                                    src={`//image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                                    alt={`${actor.name}`}\n                                    width=\"25%\" height=\"25%\" />)}\n\n                            <p>{actor.name}</p>\n                            <p><b>Character:</b> {actor.character}</p>\n                        </StyledItem>\n                    ))\n                    :\n                    \"We don't have any informations about the cast\"}\n            </StyledList>\n            {isLoading && <Loader />}\n            {error && <Error text=\"An error occurred. Please try again\" />}\n        </>\n    )\n}\n\nexport default Cast;"],"names":["StyledParagraph","styled","Error","text","fetchCast","movieId","axios","response","details","data","cast","StyledList","StyledItem","useState","isLoading","setIsLoading","error","setError","setCast","id","useParams","useEffect","handleMoviesRequest","fetchedCast","message","length","map","actor","profile_path","src","alt","width","height","name","character","Loader"],"sourceRoot":""}