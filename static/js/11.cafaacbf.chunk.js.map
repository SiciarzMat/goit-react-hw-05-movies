{"version":3,"file":"static/js/11.cafaacbf.chunk.js","mappings":"+MAIMA,EAAkBC,EAAAA,GAAAA,EAAH,sHAORC,EAAQ,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACpB,OAAO,SAACH,EAAD,UAAkBG,GAC5B,C,2JCTYC,EAAY,mCAAG,WAAMC,GAAN,yFACHC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,oBAHb,qCAEgB,cACpBE,EADoB,OAKpBC,EAAUD,EAASE,KALC,kBAOnBD,GAPmB,2CAAH,sD,sDCInBE,EAAYT,EAAAA,GAAAA,IAAH,4IAOTU,EAAYV,EAAAA,GAAAA,IAAH,sGAMTW,EAAeX,EAAAA,GAAAA,IAAH,yEAKZY,GAAaZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAH,wGAOVc,EAAad,EAAAA,GAAAA,GAAH,+DAIVD,EAAkBC,EAAAA,GAAAA,EAAH,yCAGfe,EAAef,EAAAA,GAAAA,OAAH,uNAiFlB,EAtEqB,WAAO,IAAD,IACvB,GAAkCgB,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOT,EAAP,KAAgBc,EAAhB,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GAEFE,EAAY,qBADDC,EAAAA,EAAAA,MACaC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,KAE7CC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAmB,mCAAG,2FACxBX,GAAa,GADW,kBAGOf,EAAamB,GAHpB,OAGdQ,EAHc,OAIpBT,EAAWS,GAJS,gDAMpBV,EAAS,KAAMW,SANK,yBAQpBb,GAAa,GARO,4EAAH,qDAWzBW,GACH,GAAE,CAACP,IAEJ,IAAMU,EAAO,IAAIC,KAAK1B,EAAQ2B,cAAcC,cAC5C,OACI,iCACI,SAACpB,EAAD,CAAcqB,KAAK,SAAnB,UACI,UAACxB,EAAD,CAAYyB,GAAIb,EAAhB,WACI,SAAC,MAAD,CAAac,MAAO,CAAEC,YAAa,KADvC,gBAMJ,UAAC9B,EAAD,WAC6B,OAAxBF,EAAQiC,aAEJ,gBACGC,IAAI,yLACJC,IAAI,WACJC,MAAM,MAAMC,OAAO,SAEtB,gBACGH,IAAG,oCAA+BlC,EAAQiC,aAC1CG,MAAM,MAAMC,OAAO,MACnBF,IAAG,oBAAenC,EAAQsC,UAElC,UAACnC,EAAD,YACI,0BAAKH,EAAQsC,MAAb,KAAsBtC,EAAQ2B,aAAeF,EAAO,KAApD,QACA,wCAAgBzB,EAAQuC,iBACxB,sCACA,uBAAIvC,EAAQwC,YACZ,oCACA,SAACpC,EAAD,UAAeJ,EAAQyC,OAASzC,EAAQyC,OAAOC,KAAI,SAAAC,GAAK,OAAK,0BAAsBA,EAAMC,MAAjBD,EAAM5B,GAAtB,IAAkD,UAE7GL,IAAa,SAACmC,EAAA,EAAD,IACbjC,IAAS,SAAClB,EAAA,EAAD,CAAOC,KAAK,4CAE1B,UAACO,EAAD,CAAW6B,MAAO,CAAEe,cAAe,UAAnC,WACI,SAACtD,EAAD,sCACA,UAACe,EAAD,YACI,yBAAI,SAACF,EAAD,CAAYyB,GAAG,OAAf,qBACJ,yBAAI,SAACzB,EAAD,CAAYyB,GAAG,UAAf,8BAGZ,SAAC,KAAD,MAIX,C","sources":["components/Error.js","services/fetchDetails.js","pages/MovieDetails.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport PropTypes from \"prop-types\";\n\nconst StyledParagraph = styled.p`\n    display: flex;\n    justify-content: center;\n    font-size: 20px;\n    font-size: bold;\n`\n\nexport const Error = ({ text }) => {\n    return <StyledParagraph>{text}</StyledParagraph>\n};\n\nError.propTypes = {\n    text: PropTypes.string.isRequired,\n}","import axios from 'axios';\n\nconst key = '9ac98fc7f7b54439f7d280280d36743b';\n\nexport const fetchDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${key}`\n  );\n\n  const details = response.data;\n\n  return details;\n};\n","import { useParams, NavLink, Outlet, useLocation } from \"react-router-dom\"\nimport { fetchDetails } from \"services/fetchDetails\";\nimport { useEffect, useState } from \"react\";\nimport { Loader } from \"../components/Loader\";\nimport { Error } from \"../components/Error\";\nimport styled from \"styled-components\";\nimport { BsArrowLeft } from \"react-icons/bs\";\n\nconst StyledBox = styled.div`\ndisplay: flex;\nflex-direction: row;\ngap: 15px;\npadding-bottom: 5px;\nborder-bottom: 2px solid rgb(184, 183, 183);`\n\nconst StyledDiv = styled.div`\ndisplay: flex;\nflex-direction: column;\njustify-content:center;\ngap: 10px;\n`\nconst StyledGenres = styled.div`\ndisplay: flex;\nflex-direction: row;\ngap: 5px;\n`\nconst StyledLink = styled(NavLink)`\n  text-decoration: none;\n  color: black;\n  &:hover{\n    color: orange;\n  }\n`;\nconst StyledList = styled.ul`\nmargin-left: 45px;\nline-height: 1.5;\n`\nconst StyledParagraph = styled.p`\nmargin-top: 20px;`\n\nconst StyledButton = styled.button`\nbackground-color:white;\npadding: 10px;\noutline:none;\ntext-decoration: none;\nborder: 1px solid rgb(184, 183, 183);\nborder-radius: 5px;\nmargin: 10px;\ndisplay: flex;\nalign-items: center;`\n\nconst MovieDetails = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [details, setDetails] = useState({});\n    const { id } = useParams();\n    const location = useLocation();\n    const backlinkHref = location.state?.from ?? \"/\"\n\n    useEffect(() => {\n        const handleMoviesRequest = async () => {\n            setIsLoading(true)\n            try {\n                const fetchedMovie = await fetchDetails(id);\n                setDetails(fetchedMovie);\n            } catch (error) {\n                setError(error.message)\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        handleMoviesRequest()\n    }, [id])\n\n    const year = new Date(details.release_date).getFullYear();\n    return (\n        <>\n            <StyledButton type=\"button\">\n                <StyledLink to={backlinkHref}>\n                    <BsArrowLeft style={{ marginRight: 5 }} />\n                    Go back\n                </StyledLink>\n            </StyledButton>\n\n            <StyledBox>\n                {details.poster_path === null\n                    ?\n                    (<img\n                        src=\"https://img.freepik.com/free-vector/illustration-camera-icon_53876-5563.jpg?w=900&t=st=1678486874~exp=1678487474~hmac=a4f04450d41b0500a3b50c9217530014aca806126c8517f7433768454ed1572d\"\n                        alt=\"No found\"\n                        width=\"30%\" height=\"30%\"\n                    />) :\n                    (<img\n                        src={`//image.tmdb.org/t/p/w500/${details.poster_path}`}\n                        width=\"30%\" height=\"30%\"\n                        alt={`Poster of ${details.title}`} />)}\n\n                <StyledDiv>\n                    <h2>{details.title} ({details.release_date ? year : null})</h2>\n                    <p>User Score: {details.vote_average}</p>\n                    <h3>Overview</h3>\n                    <p>{details.overview}</p>\n                    <h4>Genres</h4>\n                    <StyledGenres>{details.genres ? details.genres.map(genre => (<span key={genre.id}>{genre.name}</span>)) : null}</StyledGenres>\n                </StyledDiv>\n                {isLoading && <Loader />}\n                {error && <Error text=\"An error occurred. Please try again\" />}\n            </StyledBox>\n            <StyledBox style={{ flexDirection: \"column\" }}>\n                <StyledParagraph>Additional information</StyledParagraph>\n                <StyledList>\n                    <li><StyledLink to=\"cast\">Cast</StyledLink></li>\n                    <li><StyledLink to=\"reviews\">Reviews</StyledLink></li>\n                </StyledList>\n            </StyledBox>\n            <Outlet />\n\n        </>\n    )\n}\n\nexport default MovieDetails;"],"names":["StyledParagraph","styled","Error","text","fetchDetails","movieId","axios","response","details","data","StyledBox","StyledDiv","StyledGenres","StyledLink","NavLink","StyledList","StyledButton","useState","isLoading","setIsLoading","error","setError","setDetails","id","useParams","backlinkHref","useLocation","state","from","useEffect","handleMoviesRequest","fetchedMovie","message","year","Date","release_date","getFullYear","type","to","style","marginRight","poster_path","src","alt","width","height","title","vote_average","overview","genres","map","genre","name","Loader","flexDirection"],"sourceRoot":""}